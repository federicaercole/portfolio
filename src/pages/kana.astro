---
import Layout from "../layouts/Layout.astro";
import Related from "../components/Related.astro";
import { Icon } from "astro-icon";
import Picture from "../components/Picture.astro";
import { Code } from "astro/components";

const folder = "kana";

const images = [
    {
        name: "kana-1",
        alt: "Schermata iniziale dell'app",
    },
    {
        name: "kana-2",
        alt: "Schermata delle impostazioni",
    },
    {
        name: "kana-3",
        alt: "Schermata di ripasso delle parole",
    },
    {
        name: "kana-4",
        alt: "Pagina finale dell'app",
    },
    {
        name: "kana-5",
        alt: "Tabella delle parole incontrate",
    },
];
---

<Layout
    title="Kana App - Federica Ercole Portfolio"
    index="index"
    description="Case study di Kana App, una web app per ripassare i sillabari hiragana e katakana"
>
    <main id="main" class="page">
        <article>
            <header class="page-intro">
                <h1>Kana App</h1>
                <a
                    href="https://hanamiblog.net/kana-app"
                    class="highlight-link"
                >
                    Vai all'app
                    <Icon
                        name="jam:arrow-right"
                        aria-hidden="true"
                        width="24"
                        height="24"
                    />
                </a>
            </header>
            <p>
                Un'app costruita con React per ripassare i due sillabari della
                lingua giapponese: hiragana e katakana.
            </p>

            <p>
                Ho voluto creare questa app per aggiungere al mio sito <a
                    href="/hanami-blog/">Hanami Blog</a
                > una funzione utile a chi si sta approcciando allo studio del giapponese.
            </p>

            <p>
                In realtà esistono altri siti con lo stesso scopo, ma ciò che
                rende diversa quest'app è la possibilità di ripassare i
                caratteri all'interno di parole giapponesi. Per fare un paragone
                con l'italiano, è come esercitarsi a leggere le lettere
                dell'alfabeto dentro le parole.
            </p>

            <h2>Come funziona</h2>
            <p>
                L'applicazione è composta da 4 diverse fasi, descritte dalle
                immagini successive.
            </p>

            <div class="image-grid">
                <figure class="small">
                    <Picture
                        image={images[0].name}
                        folder={folder}
                        alt={images[0].alt}
                    />
                    <figcaption>
                        <span>1</span>L'utente seleziona il sillabario che
                        desidera ripassare.
                    </figcaption>
                </figure>
                <figure class="small">
                    <Picture
                        image={images[1].name}
                        folder={folder}
                        alt={images[1].alt}
                    />
                    <figcaption>
                        <span>2</span> L'utente sceglie i caratteri e il numero di
                        parole da ripassare. Se non esistono parole con certe combinazioni
                        di caratteri appare un messaggio per avvisare l'utente di
                        selezionare caratteri aggiuntivi.
                    </figcaption>
                </figure>
                <figure class="small">
                    <Picture
                        image={images[2].name}
                        folder={folder}
                        alt={images[2].alt}
                    />
                    <figcaption>
                        <span>3</span> Inizia il ripasso: l'utente legge la parola
                        giapponese e scrive nel campo di testo la relativa lettura
                        in lettere del nostro alfabeto. Se la risposta è corretta
                        l'app passa alla parola successiva, altrimenti offre la possibilità
                        di vedere la soluzione.
                    </figcaption>
                </figure>
                <figure class="small">
                    <Picture
                        image={images[3].name}
                        folder={folder}
                        alt={images[3].alt}
                    />
                    <figcaption>
                        <span>4</span> Una volta ripassate tutte le parole disponibili
                        termina la sessione e viene mostrato il punteggio.
                    </figcaption>
                </figure>
            </div>

            <div class="image-grid">
                <figure class="big">
                    <Picture
                        image={images[4].name}
                        folder={folder}
                        alt={images[4].alt}
                    />
                    <figcaption>
                        L'utente ha anche la possibilità di rivedere tutte le
                        parole incontrate in una comoda tabella
                    </figcaption>
                </figure>
            </div>

            <h2>Grafica e UI</h2>
            <p>
                Essendo parte del sito principale, ho cercato di rendere l'app
                simile al sito usando gli stessi colori. Per distinguerla dal
                sito ho aggiunto un leggero sfondo con caratteri giapponesi e il
                motivo di un'onda in cima.
            </p>

            <p>
                Inizialmente avevo pensato di raggruppare in una sola pagina sia
                la scelta del sillabario che le altre impostazioni. Infine ho
                scelto di separare in due fasi per evitare di dare troppe
                opzioni in una sola pagina e per far comprendere che si può
                ripassare un solo sillabario alla volta.
            </p>

            <h2>Dettagli tecnici</h2>
            <p>
                Ho scelto di costruire l'app in un'unica pagina per evitare il
                caricamento da parte dell'utente di una pagina diversa del
                percorso previsto. Il cambiamento di ogni pagina è gestito da un
                unico stato che viene cambiato al click di determinati bottoni.
            </p>

            <p>
                La <strong>funzione che caratterizza l'app</strong> è senza dubbio
                quella che si occupa di scegliere le parole da mostrare all'utente
                in maniera casuale a seconda delle opzioni inserite.
            </p>

            <p>
                Quando l'utente sceglie determinati caratteri, l'app mostra
                parole che contengono solamente quei caratteri scelti. Il modo
                più semplice per determinare se una certa parola contiene o meno
                certi caratteri è ricercare le singole sillabe all'interno di un
                array. Per questo ho scelto di trascrivere ciascuna parola
                giapponese in lettere suddividendo ciascuna sillaba in un array
                (la proprietà "romaji" dell'esempio sottostante).
            </p>

            <Code
                code={`const hiraganaWords = [{ kana: "あか", romaji: ["a","ka"], kanji: "赤" }, 
                        //...
                        ]`}
                lang="js"
            />

            <p>
                Le sillabe selezionate dall'utente vengono memorizzate in un
                array di uno stato, il cui stato iniziale ha al suo interno
                suoni che possono trovarsi all'interno delle parole e non sono
                specifici della selezione (allungamenti di vocale, consonanti
                doppie). Questi suoni iniziali sono preceduti da un trattino in
                modo tale da distinguerli dagli altri selezionabili.
            </p>

            <p>
                Una volta selezionare le sillabe l'app sceglie prima tutte
                parole che contengono soltanto quelle sillabe tramite i metodi
                filter e every, dopodiché viene svolta una selezione casuale
                scegliendo un numero massimo di parole determinato dall'utente.
            </p>

            <Code
                code={`//funzione che seleziona parole in modo casuale
                function selectWordsRandom(filteredWords) {
                    const selectedWordsSet = new Set();
                
                    if (filteredWords.length > maxNumberOfWords) {
                      while (selectedWordsSet.size < maxNumberOfWords) {
                        const randomIndex = Math.floor(Math.random() * filteredWords.length);
                        selectedWordsSet.add(filteredWords[randomIndex]);
                      }
                      setSelectedWords([...selectedWordsSet]);
                    } else {
//se le parole disponibili sono meno dell'opzione scelta dall'utente mescola l'array
                      shuffle(filteredWords);
                      setMaxNumberOfWords(filteredWords.length);
                      setSelectedWords(filteredWords);
                    }
                  }

// funzione per determinare l'array di parole con determinate sillabe         
function setArrayOfWords() {
                    const array = isHiragana ? hiraganaWords : katakanaWords;
                    if (selectedKana.length === (totalKana.length + initialSounds.length)) {
                      return array;
                    } else {
                      return array.filter(word => word.romaji.every((letter) => {
                        return selectedKana.indexOf(letter) !== -1;
                      }))
                    }
                  }`}
                lang="js"
            />
            <p>
                Vedi il <a href="https://github.com/federicaercole/kana-app"
                    >codice completo su Github</a
                >
            </p>

            <h2>Cosa ho imparato da questo progetto</h2>
            <p>Da questo progetto ho imparato principalmente a:</p>
            <ul>
                <li>gestire gli stati e gli effetti in React</li>
                <li>strutturare meglio il codice</li>
                <li>
                    trovare una soluzione per la funzione principale dell'app
                </li>
            </ul>
        </article>
    </main>
    <Related page="Kana App" />
</Layout>
