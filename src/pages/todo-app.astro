---
import Layout from "../layouts/Layout.astro";
import Related from "../components/Related.astro";
import { Icon } from "astro-icon";
import Picture from "../components/Picture.astro";

const folder = "todo-app";

const images = [
{
name: "todo-app-1",
alt: "Schermata dell'homepage dell'app su desktop",
},
{
name: "todo-app-2",
alt: "Schermata dell'homepage dell'app su mobile",
},
{
name: "todo-app-3",
alt: "Schermata che mostra l'opzione di modifica del nome della categoria e delle opzioni di filtro",
},
{
name: "todo-app-4",
alt: "Finestra di dialogo per confermare la cancellazione della categoria",
},
{
name: "todo-app-5",
alt: "Landing page dell'app",
},
];
---

<Layout title="To-do App - Federica Ercole Portfolio" index="index"
    description="Case study di un'app per tenere traccia delle cose da fare">
    <main id="main" class="page">
        <article>
            <header class="page-intro">
                <h1>To-do App</h1>
                <a href="https://todoapp.federicaercole.com/" class="highlight-link">
                    Vai all'app
                    <Icon name="jam:arrow-right" aria-hidden="true" width="24" height="24" />
                </a>
            </header>
            <p>
                Un'app per aiutare a tenere traccia degli impegni. È stata costruita utilizzando il framework
                Express di Node.js per il back end e mySQL per il database. Per il front end ho scelto di usare ejs (per
                visualizzare le pagine) e JavaScript.
            </p>
            <p>Le sue funzionalità sono:</p>
            <ul>
                <li>Utilizzo dell'app tramite un account</li>
                <li>Possibilità di aggiungere, modificare e cancellare sia le attività da svolgere che le categorie di
                    appartenenza</li>
                <li>Mostrare le attività da fare in base ai filtri inseriti per priorità e stato</li>
                <li>Validazione dei moduli sia su front end che su back end</li>
            </ul>
            <h2>Grafica e UI</h2>
            <p>
                Dopo una rapida ricerca di altre app con funzionalità simili, ho deciso di usare una veste grafica che
                privilegi tinte piatte e forme squadrate, in modo tale da distinguerla da altre app e renderla più
                gradevole all'uso.
            </p>
            <div class="image-grid">
                <figure class="medium bottom-caption">
                    <Picture alt={images[0].alt} folder={folder} image={images[0].name} />
                    <figcaption>Come appare l'homepage su desktop</figcaption>
                </figure>
                <figure class="mini bottom-caption">
                    <Picture alt={images[1].alt} folder={folder} image={images[1].name} />
                    <figcaption>Come appare l'homepage su mobile</figcaption>
                </figure>
                <figure class="big">
                    <Picture alt={images[4].alt} folder={folder} image={images[4].name} />
                    <figcaption>Landing page su desktop</figcaption>
                </figure>
            </div>
            <p>
                È stato dato anche molto spazio al menù di navigazione nella versione desktop per renderla più semplice
                e mostrare a colpo d'occhio tutte le categorie esistenti.
            </p>
            <h2>Dettagli tecnici</h2>
            <p>
                Per la parte back end ho scelto di strutturare il codice seguendo l'architettura MVC, separando modelli,
                viste e controllori in modo tale da rendere il codice facilmente scalabile e ben organizzato.
            </p>
            <p>
                Per ogni route ho fatto in modo di usare i metodi HTTP (get, post, put e delete) corrispondenti alle
                varie operazioni CRUD, anche attraverso l'uso di un pacchetto npm necessario per sovrascrivere i metodi
                get e post dei moduli.
            </p>
            <p>Per la creazione degli account è stato usato il package Passport, insieme al relativo package Local Strategy per gestire il login e il logout. 
                Per gestire le sessioni sono stati usati i cookie e il salvataggio delle sessioni su database.</p>
            <p>
                Dal lato front end invece vorrei far notare l'accessibilità delle finestre di dialogo, dalle quali si
                può uscire premendo il tasto esc e navigare tramite il tasto tab. In particolare ho seguito
                le <a href="https://www.w3.org/WAI/ARIA/apg/patterns/dialog-modal/">linee guida del W3C</a> che
                consiglia di implementare la navigazione con tab nella sola finestra, in modo
                tale da evitare di avere il cursore intrappolato nella pagina sottostante non visibile.
            </p>
            <div class="image-grid">
                <figure class="big">
                    <Picture alt={images[2].alt} folder={folder} image={images[2].name} />
                    <figcaption>
                        L'opzione modifica il nome della categoria e i filtri
                    </figcaption>
                </figure>
                <figure class="big">
                    <Picture alt={images[3].alt} folder={folder} image={images[3].name} />
                    <figcaption>
                        Un esempio di finestra di dialogo dell'app
                    </figcaption>
                </figure>
            </div>

            <h2>Cosa ho imparato da questo progetto</h2>
            <p>
                Costruendo questa app ho migliorato le mie conoscenze del back end:
            </p>
            <ul>
                <li>Ho approfondito l'uso di Node.js e di vari pacchetti npm per estendere varie funzionalità</li>
                <li>Usare un database relazionale</li>
                <li>Strutturare l'app con un'architettura MVC</li>
            </ul>
        </article>
    </main>
    <Related page="To-do App" />
</Layout>